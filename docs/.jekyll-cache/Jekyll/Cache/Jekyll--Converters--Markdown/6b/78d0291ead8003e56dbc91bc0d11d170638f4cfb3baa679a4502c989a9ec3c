I"èﬂ<h1 id="tool-calling-with-mcp">Tool-Calling with MCP</h1>

<h2 id="the-problem">The Problem</h2>

<p>Modern AI applications need to interact with external tools to solve complex problems. Whether it‚Äôs performing calculations, accessing databases, or calling APIs, we need a standardized way for LLMs to discover and use these tools.</p>

<h2 id="solution-with-grapheteria">Solution with Grapheteria</h2>

<p>Grapheteria makes building tool-using workflows simple with MCP (Model Context Protocol). Here‚Äôs what we‚Äôll build:</p>

<ul>
  <li><strong>User Input</strong>: A user asks a question requiring external tools</li>
  <li><strong>MCP Connection</strong>: System connects to a tool server</li>
  <li><strong>LLM Planning</strong>: Claude decides which tools to use</li>
  <li><strong>Tool Execution</strong>: System executes the selected tool via MCP</li>
  <li><strong>Response Synthesis</strong>: Claude interprets tool results and answers the question</li>
</ul>

<h3 id="first-lets-create-our-mcp-server-with-powerful-tools">First, let‚Äôs create our MCP server with powerful tools</h3>

<p>Let‚Äôs set up an MCP server with a few example tools. While these demonstrations are straightforward, you can implement tools with any level of complexity your application requires:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mcp_server.py
</span><span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span>

<span class="c1"># Create a named server
</span><span class="n">mcp</span> <span class="o">=</span> <span class="nc">FastMCP</span><span class="p">(</span><span class="sh">"</span><span class="s">Claude Tool Server</span><span class="sh">"</span><span class="p">)</span>

<span class="nd">@mcp.tool</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">calculate</span><span class="p">(</span><span class="n">expression</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Evaluate a mathematical expression safely</span><span class="sh">"""</span>
    <span class="c1"># In a real application, use a safer evaluation method
</span>    <span class="k">return</span> <span class="nf">eval</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">__builtins__</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}},</span> <span class="p">{</span><span class="sh">"</span><span class="s">abs</span><span class="sh">"</span><span class="p">:</span> <span class="nb">abs</span><span class="p">,</span> <span class="sh">"</span><span class="s">round</span><span class="sh">"</span><span class="p">:</span> <span class="nb">round</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="nb">max</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="nb">min</span><span class="p">})</span>

<span class="nd">@mcp.tool</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">get_country_info</span><span class="p">(</span><span class="n">country</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Get basic information about a country</span><span class="sh">"""</span>
    <span class="n">countries</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">france</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">capital</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Paris</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">population</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">67 million</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">language</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">French</span><span class="sh">"</span><span class="p">},</span>
        <span class="sh">"</span><span class="s">japan</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">capital</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Tokyo</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">population</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">126 million</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">language</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Japanese</span><span class="sh">"</span><span class="p">},</span>
        <span class="sh">"</span><span class="s">brazil</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">capital</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Bras√≠lia</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">population</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">213 million</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">language</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Portuguese</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">countries</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">country</span><span class="p">.</span><span class="nf">lower</span><span class="p">(),</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Country not found</span><span class="sh">"</span><span class="p">})</span>

<span class="nd">@mcp.tool</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">convert_units</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">from_unit</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">to_unit</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Convert between common units</span><span class="sh">"""</span>
    <span class="n">conversions</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">km_to_miles</span><span class="sh">"</span><span class="p">:</span> <span class="mf">0.621371</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">miles_to_km</span><span class="sh">"</span><span class="p">:</span> <span class="mf">1.60934</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">kg_to_lb</span><span class="sh">"</span><span class="p">:</span> <span class="mf">2.20462</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">lb_to_kg</span><span class="sh">"</span><span class="p">:</span> <span class="mf">0.453592</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">celsius_to_fahrenheit</span><span class="sh">"</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">9</span><span class="o">/</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">32</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">fahrenheit_to_celsius</span><span class="sh">"</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span><span class="o">/</span><span class="mi">9</span><span class="p">,</span>
    <span class="p">}</span>
    
    <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">from_unit</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span><span class="si">}</span><span class="s">_to_</span><span class="si">{</span><span class="n">to_unit</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">conversions</span><span class="p">:</span>
        <span class="n">converter</span> <span class="o">=</span> <span class="n">conversions</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">callable</span><span class="p">(</span><span class="n">converter</span><span class="p">):</span>
            <span class="k">return</span> <span class="nf">converter</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">converter</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Conversion not supported</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># Start the server
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">mcp</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="lets-create-our-utility-functions">Let‚Äôs create our utility functions</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># utils.py
</span><span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">List</span>
<span class="kn">from</span> <span class="n">anthropic</span> <span class="kn">import</span> <span class="n">Anthropic</span>
<span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="nf">load_dotenv</span><span class="p">()</span>  <span class="c1"># load environment variables from .env
</span>
<span class="nd">@lru_cache</span><span class="p">(</span><span class="n">maxsize</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_llm_client</span><span class="p">():</span>
    <span class="k">return</span> <span class="nc">Anthropic</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ANTHROPIC_API_KEY</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">call_llm</span><span class="p">(</span><span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">llm_client</span> <span class="o">=</span> <span class="nf">get_llm_client</span><span class="p">()</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">llm_client</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">claude-3-5-sonnet-20241022</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">max_tokens</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span>
        <span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span>
</code></pre></div></div>

<h3 id="now-lets-define-our-workflow-nodes">Now, let‚Äôs define our workflow nodes</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># nodes.py
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">mcp</span> <span class="kn">import</span> <span class="n">ClientSession</span><span class="p">,</span> <span class="n">StdioServerParameters</span><span class="p">,</span> <span class="n">stdio_client</span>
<span class="kn">from</span> <span class="n">utils</span> <span class="kn">import</span> <span class="n">call_llm</span>
<span class="kn">from</span> <span class="n">grapheteria</span> <span class="kn">import</span> <span class="n">Node</span>

<span class="k">class</span> <span class="nc">QuestionNode</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">request_input</span><span class="p">):</span>
        <span class="n">question</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">request_input</span><span class="p">(</span>
            <span class="n">prompt</span><span class="o">=</span><span class="sh">"</span><span class="s">What would you like to know?</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">input_type</span><span class="o">=</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span>
        <span class="p">)</span>

        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">question</span>
        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">shared</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span>
        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">].</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">question</span>
        <span class="p">})</span>

<span class="k">class</span> <span class="nc">CollectMCPToolsNode</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">_</span><span class="p">):</span>
        <span class="n">server_params</span> <span class="o">=</span> <span class="nc">StdioServerParameters</span><span class="p">(</span>
        <span class="n">command</span><span class="o">=</span><span class="sh">"</span><span class="s">python</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">args</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">examples/mcp_tool_calling/mcp_server.py</span><span class="sh">"</span><span class="p">],</span>
        <span class="p">)</span>

        <span class="k">async</span> <span class="k">with</span> <span class="nf">stdio_client</span><span class="p">(</span><span class="n">server_params</span><span class="p">)</span> <span class="nf">as </span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="n">write</span><span class="p">):</span>
            <span class="k">async</span> <span class="k">with</span> <span class="nc">ClientSession</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="n">write</span><span class="p">)</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
                <span class="c1"># Initialize the connection
</span>                <span class="k">await</span> <span class="n">session</span><span class="p">.</span><span class="nf">initialize</span><span class="p">()</span>
                <span class="c1"># Get tools
</span>                <span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">session</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()</span>
        
        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">input_schema</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool</span><span class="p">.</span><span class="n">inputSchema</span>
                <span class="p">}</span> <span class="k">for</span> <span class="n">tool</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>  
        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">collected_tools</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        
<span class="k">class</span> <span class="nc">InitialResponseNode</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">request_input</span><span class="p">):</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">messages</span> <span class="o">=</span> <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">tools</span><span class="p">,</span> <span class="n">messages</span>
        
    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prep_result</span><span class="p">):</span>             
        <span class="n">tools</span><span class="p">,</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">prep_result</span>
              
        <span class="n">response</span> <span class="o">=</span> <span class="nf">call_llm</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="p">)</span>
    
        <span class="k">return</span> <span class="n">response</span>
    
    <span class="k">def</span> <span class="nf">cleanup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">prep_result</span><span class="p">,</span> <span class="n">exec_result</span><span class="p">):</span> 
        <span class="n">tool_calls</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">content</span> <span class="ow">in</span> <span class="n">exec_result</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">content</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">tool_use</span><span class="sh">'</span><span class="p">:</span>
                <span class="n">tool_call</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">content</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">content</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">content</span><span class="p">.</span><span class="nb">input</span>
                <span class="p">}</span>
                <span class="n">tool_calls</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tool_call</span><span class="p">)</span>

        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">tool_calls</span>
        <span class="n">messages</span> <span class="o">=</span> <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_result</span><span class="p">.</span><span class="n">content</span>
        <span class="p">})</span>
        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">messages</span>

<span class="c1">#Parallel Tool Execution
</span><span class="k">class</span> <span class="nc">ToolExecutionNode</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
   <span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">request_input</span><span class="p">):</span>    
        <span class="n">tool_calls</span> <span class="o">=</span> <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">tool_calls</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_execute_with_retry</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">items</span><span class="p">):</span>
        <span class="c1"># Process all items in parallel
</span>        <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="nf">_process_item</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">]</span>
        <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="n">tasks</span><span class="p">,</span> <span class="n">return_exceptions</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="c1"># Check for exceptions
</span>        <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="nb">Exception</span><span class="p">):</span>
                <span class="k">raise</span> <span class="n">result</span>
                
        <span class="k">return</span> <span class="n">results</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prep_result</span><span class="p">):</span>
        <span class="n">tool_id</span><span class="p">,</span> <span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_input</span> <span class="o">=</span> <span class="n">prep_result</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">],</span> <span class="n">prep_result</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">],</span> <span class="n">prep_result</span><span class="p">[</span><span class="sh">'</span><span class="s">input</span><span class="sh">'</span><span class="p">]</span>

        <span class="n">server_params</span> <span class="o">=</span> <span class="nc">StdioServerParameters</span><span class="p">(</span>
        <span class="n">command</span><span class="o">=</span><span class="sh">"</span><span class="s">python</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">args</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">examples/mcp_tool_calling/mcp_server.py</span><span class="sh">"</span><span class="p">],</span>
        <span class="p">)</span>

        <span class="k">async</span> <span class="k">with</span> <span class="nf">stdio_client</span><span class="p">(</span><span class="n">server_params</span><span class="p">)</span> <span class="nf">as </span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="n">write</span><span class="p">):</span>
            <span class="k">async</span> <span class="k">with</span> <span class="nc">ClientSession</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="n">write</span><span class="p">)</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
                <span class="c1"># Initialize the connection
</span>                <span class="k">await</span> <span class="n">session</span><span class="p">.</span><span class="nf">initialize</span><span class="p">()</span>
                <span class="c1"># Execute the tool
</span>                <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">session</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">tool_input</span><span class="p">)</span>

        
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">tool_use_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">result</span><span class="p">.</span><span class="n">content</span>
        <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">cleanup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">prep_result</span><span class="p">,</span> <span class="n">exec_result</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">exec_result</span><span class="p">:</span>
            <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">].</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
                    <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool_result</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">tool_use_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">result</span><span class="p">[</span><span class="sh">"</span><span class="s">tool_use_id</span><span class="sh">"</span><span class="p">],</span>
                        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">result</span><span class="p">[</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">]</span>
                    <span class="p">}</span>
                <span class="p">]</span>
            <span class="p">})</span>

<span class="k">class</span> <span class="nc">FinalResponseNode</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">request_input</span><span class="p">):</span>
        <span class="n">messages</span> <span class="o">=</span> <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">]</span>

        <span class="k">return</span> <span class="n">messages</span><span class="p">,</span> <span class="n">tools</span>
    
    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prep_result</span><span class="p">):</span> 
        <span class="n">messages</span><span class="p">,</span> <span class="n">tools</span> <span class="o">=</span> <span class="n">prep_result</span>
        <span class="c1"># Get final response from Claude
</span>        <span class="n">response</span> <span class="o">=</span> <span class="nf">call_llm</span><span class="p">(</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">text</span>
    
    <span class="k">def</span> <span class="nf">cleanup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">prep_result</span><span class="p">,</span> <span class="n">exec_result</span><span class="p">):</span>
        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">final_response</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">exec_result</span>

<span class="k">class</span> <span class="nc">FeedbackNode</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shared</span><span class="p">,</span> <span class="n">request_input</span><span class="p">):</span>
        <span class="k">global</span> <span class="n">_mcp_client</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">üîç Response:</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Question: </span><span class="si">{</span><span class="n">shared</span><span class="p">[</span><span class="sh">'</span><span class="s">question</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Answer:</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">shared</span><span class="p">[</span><span class="sh">'</span><span class="s">final_response</span><span class="sh">'</span><span class="p">])</span>
        
        <span class="n">feedback</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">request_input</span><span class="p">(</span>
            <span class="n">prompt</span><span class="o">=</span><span class="sh">"</span><span class="s">Was this answer helpful?</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">options</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">yes</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">no</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">input_type</span><span class="o">=</span><span class="sh">"</span><span class="s">select</span><span class="sh">"</span>
        <span class="p">)</span>     
        <span class="n">shared</span><span class="p">[</span><span class="sh">"</span><span class="s">feedback</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">feedback</span>
</code></pre></div></div>

<h3 id="finally-lets-define-and-run-our-workflow">Finally, let‚Äôs define and run our workflow</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.py
</span><span class="kn">from</span> <span class="n">nodes</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">grapheteria</span> <span class="kn">import</span> <span class="n">WorkflowEngine</span>
<span class="kn">import</span> <span class="n">asyncio</span>

<span class="c1"># Create nodes
</span><span class="n">question</span> <span class="o">=</span> <span class="nc">QuestionNode</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">)</span>
<span class="n">collect_mcp_tools</span> <span class="o">=</span> <span class="nc">CollectMCPToolsNode</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">collect_mcp_tools</span><span class="sh">"</span><span class="p">)</span>
<span class="n">initial_response</span> <span class="o">=</span> <span class="nc">InitialResponseNode</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">initial_response</span><span class="sh">"</span><span class="p">)</span>
<span class="n">tool_execution</span> <span class="o">=</span> <span class="nc">ToolExecutionNode</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">tool_execution</span><span class="sh">"</span><span class="p">)</span>
<span class="n">final_response</span> <span class="o">=</span> <span class="nc">FinalResponseNode</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">final_response</span><span class="sh">"</span><span class="p">)</span>
<span class="n">feedback</span> <span class="o">=</span> <span class="nc">FeedbackNode</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">feedback</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Connect nodes to form workflow
</span><span class="n">question</span> <span class="o">&gt;</span> <span class="n">collect_mcp_tools</span> <span class="o">&gt;</span> <span class="n">initial_response</span> <span class="o">&gt;</span> <span class="n">final_response</span>
<span class="n">question</span> <span class="o">-</span> <span class="sh">"</span><span class="s">shared.get(</span><span class="sh">'</span><span class="s">collected_tools</span><span class="sh">'</span><span class="s">, False) == True</span><span class="sh">"</span> <span class="o">&gt;</span> <span class="n">initial_response</span>
<span class="n">initial_response</span> <span class="o">-</span> <span class="sh">"</span><span class="s">shared.get(</span><span class="sh">'</span><span class="s">tool_calls</span><span class="sh">'</span><span class="s">, False)</span><span class="sh">"</span> <span class="o">&gt;</span> <span class="n">tool_execution</span> <span class="o">&gt;</span> <span class="n">final_response</span>
<span class="n">final_response</span> <span class="o">&gt;</span> <span class="n">feedback</span>
<span class="n">feedback</span> <span class="o">-</span> <span class="sh">"</span><span class="s">shared[</span><span class="sh">'</span><span class="s">feedback</span><span class="sh">'</span><span class="s">] == </span><span class="sh">'</span><span class="s">no</span><span class="sh">'"</span> <span class="o">&gt;</span> <span class="n">question</span>

<span class="c1"># Create the workflow engine    
</span><span class="n">workflow</span> <span class="o">=</span> <span class="nc">WorkflowEngine</span><span class="p">(</span>
    <span class="n">workflow_id</span><span class="o">=</span><span class="sh">"</span><span class="s">mcp_tool_calling</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">nodes</span><span class="o">=</span><span class="p">[</span><span class="n">question</span><span class="p">,</span> <span class="n">collect_mcp_tools</span><span class="p">,</span> <span class="n">initial_response</span><span class="p">,</span> <span class="n">tool_execution</span><span class="p">,</span> <span class="n">final_response</span><span class="p">,</span> <span class="n">feedback</span><span class="p">],</span>
    <span class="n">start</span><span class="o">=</span><span class="n">question</span>
<span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_workflow</span><span class="p">():</span>
    <span class="n">user_input</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">continue_workflow</span> <span class="o">=</span> <span class="k">await</span> <span class="n">workflow</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span>
        
        <span class="c1"># If workflow is waiting for input
</span>        <span class="k">if</span> <span class="n">workflow</span><span class="p">.</span><span class="n">execution_state</span><span class="p">.</span><span class="n">awaiting_input</span><span class="p">:</span>
            <span class="n">request</span> <span class="o">=</span> <span class="n">workflow</span><span class="p">.</span><span class="n">execution_state</span><span class="p">.</span><span class="n">awaiting_input</span>
            <span class="n">request_id</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="sh">'</span><span class="s">request_id</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">prompt</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="sh">'</span><span class="s">prompt</span><span class="sh">'</span><span class="p">]</span>
            
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[Input required] </span><span class="si">{</span><span class="n">prompt</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="n">request</span><span class="p">[</span><span class="sh">'</span><span class="s">input_type</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">select</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">option</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">request</span><span class="p">[</span><span class="sh">'</span><span class="s">options</span><span class="sh">'</span><span class="p">]):</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s">. </span><span class="si">{</span><span class="n">option</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">choice</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter your choice (number): </span><span class="sh">"</span><span class="p">)</span>
                <span class="n">user_input</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="sh">'</span><span class="s">options</span><span class="sh">'</span><span class="p">][</span><span class="nf">int</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">user_input</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Your response: </span><span class="sh">"</span><span class="p">)</span>
            
            <span class="k">await</span> <span class="n">workflow</span><span class="p">.</span><span class="nf">step</span><span class="p">({</span><span class="n">request_id</span><span class="p">:</span> <span class="n">user_input</span><span class="p">})</span>
        <span class="k">elif</span> <span class="ow">not</span> <span class="n">continue_workflow</span><span class="p">:</span>
            <span class="k">break</span>
            
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">üß† Claude Research Assistant with MCP Tools</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">------------------------------------------</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Ask me anything! I can use tools to help you.</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="c1"># Run the workflow
</span>    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">run_workflow</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="workflow-json-schema">Workflow JSON Schema</h3>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"question"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"nodes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"question"</span><span class="p">,</span><span class="w"> </span><span class="nl">"class"</span><span class="p">:</span><span class="w"> </span><span class="s2">"QuestionNode"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"collect_mcp_tools"</span><span class="p">,</span><span class="w"> </span><span class="nl">"class"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CollectMCPToolsNode"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"initial_response"</span><span class="p">,</span><span class="w"> </span><span class="nl">"class"</span><span class="p">:</span><span class="w"> </span><span class="s2">"InitialResponseNode"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tool_execution"</span><span class="p">,</span><span class="w"> </span><span class="nl">"class"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ToolExecutionNode"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"final_response"</span><span class="p">,</span><span class="w"> </span><span class="nl">"class"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FinalResponseNode"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feedback"</span><span class="p">,</span><span class="w"> </span><span class="nl">"class"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FeedbackNode"</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"edges"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"question"</span><span class="p">,</span><span class="w"> </span><span class="nl">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"collect_mcp_tools"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"collect_mcp_tools"</span><span class="p">,</span><span class="w"> </span><span class="nl">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"initial_response"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"question"</span><span class="p">,</span><span class="w"> </span><span class="nl">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"initial_response"</span><span class="p">,</span><span class="w"> </span><span class="nl">"condition"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shared.get('collected_tools', False) == True"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"initial_response"</span><span class="p">,</span><span class="w"> </span><span class="nl">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"final_response"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"initial_response"</span><span class="p">,</span><span class="w"> </span><span class="nl">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tool_execution"</span><span class="p">,</span><span class="w"> </span><span class="nl">"condition"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shared.get('tool_calls', False)"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tool_execution"</span><span class="p">,</span><span class="w"> </span><span class="nl">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"final_response"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"final_response"</span><span class="p">,</span><span class="w"> </span><span class="nl">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feedback"</span><span class="w"> </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w"> </span><span class="nl">"from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feedback"</span><span class="p">,</span><span class="w"> </span><span class="nl">"to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"question"</span><span class="p">,</span><span class="w"> </span><span class="nl">"condition"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shared['feedback'] == 'no'"</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
  
</span></code></pre></div></div>

<h2 id="setup">Setup</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install dependencies</span>
pip <span class="nb">install </span>grapheteria fastmcp anthropic mcp python-dotenv

<span class="c"># Set your Anthropic API key in the .env file</span>
<span class="nb">echo</span> <span class="s2">"ANTHROPIC_API_KEY=your-api-key-here"</span> <span class="o">&gt;</span> .env

<span class="c"># Run the workflow</span>
python main.py
</code></pre></div></div>

<h2 id="key-features-demonstrated">Key Features Demonstrated</h2>

<ul>
  <li><strong>Granular Steps</strong> - Each part of the process has its own dedicated node</li>
  <li><strong>MCP Protocol</strong> - Standard protocol for model-tool interaction</li>
  <li><strong>State Propagation</strong> - Tool results and conversation history flow through shared state</li>
  <li><strong>Visual Workflow</strong> - Entire tool-use cycle visualized in the Grapheteria UI</li>
  <li><strong>Claude Integration</strong> - Direct access to Claude‚Äôs powerful tool-use capabilities</li>
</ul>

<p>As always, run <code class="language-plaintext highlighter-rouge">grapheteria</code> in your terminal to launch the UI and visualize/run/debug this workflow.</p>

<p><img src="assets/mcp.png" alt="Tool-Calling with MCP (UI View)" /></p>

<p>The entire code for this example, along with deployment instructions, is available <a href="https://github.com/beubax/grapheteria/examples/mcp_tool_calling" target="_blank">here</a>. This pattern gives you maximum visibility into each stage of the tool-use process, making it perfect for debugging or adding custom logic at any point in the workflow!</p>
:ET